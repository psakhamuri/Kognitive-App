{"version":3,"sources":["Components/Login.js","Services/postData.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","email","password","tenantid","redirectToReferrer","login","bind","onchange","type","userData","this","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","response","json","res","catch","error","result","responseJson","sessionStorage","setItem","setState","e","target","name","value","getItem","to","className","onSubmit","src","alt","placeholder","onChange","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f13cfa62.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PostData} from '../Services/postData';\r\nimport './Login.css';\r\n\r\nclass Login extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      tenantid: '3',\r\n      redirectToReferrer: false\r\n    }\r\n    this.login = this.login.bind(this);\r\n    this.onchange = this.onchange.bind(this);\r\n  }\r\n  login(){\r\n    if(this.state.email && this.state.password && this.state.tenantid){\r\n      PostData('login/password',this.state).then((result) => {\r\n       let responseJson = result;\r\n       if(responseJson.userData){         \r\n         sessionStorage.setItem('userData',JSON.stringify(responseJson));\r\n         this.setState({redirectToReferrer: true});\r\n       }\r\n       \r\n      });\r\n    }\r\n    }\r\n\r\n    onchange(e){\r\n      this.setState({[e.target.name]: e.target.value})\r\n    }\r\n    render(){\r\n      if (this.state.redirectToReferrer) {\r\n        return (<Redirect to={'/Tasks'}/>)\r\n      }\r\n     \r\n      if(sessionStorage.getItem('userData')){\r\n        return (<Redirect to={'/Tasks'}/>)\r\n      }\r\n  return (\r\n    \r\n    <div className=\"card mt-4 mr-3 ml-3\">\r\n    <div className=\"card-body\">\r\n  \r\n    <div className=\"login-form\">\r\n      <form onSubmit = {this.login}>\r\n      <img className=\"card-img-top\" src=\"/kog_logo_flat@3x.png\" alt=\"\"/>\r\n  \r\n      <div className=\"social-icon\">\r\n          <button type=\"button mb-3\"><span className=\"input-icon\"><img  src=\"/assets/icons/othersize/google-favicon.png\" alt=\"\" />&nbsp;</span>Login With Google</button>\r\n          <button type=\"button\"><span className=\"input-icon\"><img  src=\"/assets/icons/othersize/microsoft.png\" alt=\"\" />&nbsp;</span>Login With Office 365</button>\r\n        </div>\r\n        <div className=\"seperator\"><b>or</b></div>\r\n      <div className=\"form-group\">\r\n          <input type=\"email\" name=\"email\" placeholder=\"Your Employee ID\" onChange = {this.onchange}/>\r\n          <span className=\"input-icon\"><img  src=\"/assets/icons/24/icon-24-person-grey.png\" alt=\"\"/></span>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"password\" name=\"password\" placeholder=\"Your Password\" onChange = {this.onchange}/>\r\n          <span className=\"input-icon\"><img src=\"/assets/icons/24/icon-24-password.png\" alt=\"\"/></span>\r\n        </div>\r\n        <button className=\"login-btn\">Login</button> \r\n      </form>\r\n      </div>\r\n  \r\n    </div>\r\n    </div>\r\n\r\n    );\r\n}\r\n}\r\n\r\nexport default Login;","export function PostData(type, userData) {\r\n    let BaseURL = 'https://staging-core-optimy.com/api/v1/';\r\n\r\n    return new Promise((resolve, reject) =>{\r\n    \r\n         \r\n        fetch(BaseURL+type, {\r\n            method: 'POST',\r\n            headers:{\r\n                'authorization':'r0MrA268ORAobX53qkoaohaA7g9ek3JJ',\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            },\r\n            body: JSON.stringify(userData)\r\n          })\r\n          .then((response) => response.json())\r\n          .then((res) => {\r\n            resolve(res);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n\r\n  \r\n      });\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Login from './Components/Login';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"App-header\">\r\n\r\n     <Login/>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}